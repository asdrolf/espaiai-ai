---
// Klaro Accessibility Enhancement Component
// Simple component to improve contrast and accessibility of Klaro cookie dialog
---

<script>
  // Enhance Klaro accessibility when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    enhanceKlaroAccessibility();
  });

  function enhanceKlaroAccessibility() {
    // Wait for Klaro to be available
    const checkKlaro = () => {
      if (window.klaro && typeof window.klaro.getManager === 'function') {
        setupKlaroAccessibility();
      } else {
        setTimeout(checkKlaro, 100);
      }
    };
    
    checkKlaro();
  }

  function setupKlaroAccessibility() {
    // Create a mutation observer to watch for dialog creation
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;
            if (element.getAttribute('role') === 'dialog' || 
                element.classList.contains('cookie-notice') ||
                element.id === 'klaro-cookie-notice') {
              enhanceDialog(element as HTMLElement);
            }
          }
        });
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    // Check if dialog already exists
    const existingDialog = document.querySelector('[role="dialog"], .cookie-notice, #klaro-cookie-notice');
    if (existingDialog) {
      enhanceDialog(existingDialog as HTMLElement);
    }
  }

  function enhanceDialog(dialog: HTMLElement) {
    // Only apply styles if not already enhanced
    if (dialog.hasAttribute('data-accessibility-enhanced')) {
      return;
    }
    
    // Apply basic accessibility styles
    applyAccessibilityStyles(dialog);
    
    // Mark as enhanced
    dialog.setAttribute('data-accessibility-enhanced', 'true');
  }

  function applyAccessibilityStyles(dialog: HTMLElement) {
    // Apply background and text colors
    dialog.style.setProperty('background', '#ffffff', 'important');
    dialog.style.setProperty('color', '#374151', 'important');
    dialog.style.setProperty('border', '1px solid #e5e7eb', 'important');
    
    // Apply styles to ALL text elements more aggressively
    const allElements = dialog.querySelectorAll('*');
    allElements.forEach(element => {
      const el = element as HTMLElement;
      // Only apply to text elements, not buttons
      if (!el.classList.contains('cm-btn') && 
          !el.classList.contains('cm-btn-success') && 
          !el.classList.contains('cm-btn-danger') &&
          !el.classList.contains('cm-link')) {
        el.style.setProperty('color', '#374151', 'important');
      }
    });
    
    // Apply styles to buttons
    const successButtons = dialog.querySelectorAll('.cm-btn-success');
    successButtons.forEach(button => {
      (button as HTMLElement).style.setProperty('background', '#2563eb', 'important');
      (button as HTMLElement).style.setProperty('color', '#ffffff', 'important');
      (button as HTMLElement).style.setProperty('border', 'none', 'important');
    });
    
    const dangerButtons = dialog.querySelectorAll('.cm-btn-danger');
    dangerButtons.forEach(button => {
      (button as HTMLElement).style.setProperty('background', '#4b5563', 'important');
      (button as HTMLElement).style.setProperty('color', '#ffffff', 'important');
      (button as HTMLElement).style.setProperty('border', 'none', 'important');
    });
    
    // Apply styles to links
    const links = dialog.querySelectorAll('.cm-link');
    links.forEach(link => {
      (link as HTMLElement).style.setProperty('color', '#2563eb', 'important');
      (link as HTMLElement).style.setProperty('text-decoration', 'underline', 'important');
      (link as HTMLElement).style.setProperty('font-weight', '500', 'important');
    });
    
    // Force color on any remaining text elements that might be missed
    forceTextColor(dialog);
  }
  
  function forceTextColor(dialog: HTMLElement) {
    // Get all text nodes and their parent elements
    const walker = document.createTreeWalker(
      dialog,
      NodeFilter.SHOW_TEXT,
      null
    );
    
    let textNode;
    while (textNode = walker.nextNode()) {
      if (textNode.textContent && textNode.textContent.trim()) {
        const parent = textNode.parentElement;
        if (parent && 
            !parent.classList.contains('cm-btn') && 
            !parent.classList.contains('cm-btn-success') && 
            !parent.classList.contains('cm-btn-danger') &&
            !parent.classList.contains('cm-link')) {
          parent.style.setProperty('color', '#374151', 'important');
        }
      }
    }
  }

  // Global type declarations
  declare global {
    interface Window {
      klaro?: {
        getManager: () => {
          consents: Record<string, boolean>;
        };
      };
    }
  }
</script>

<style>
  /* Simple CSS overrides for Klaro accessibility */
  [role="dialog"],
  .cookie-notice,
  #klaro-cookie-notice {
    background: #ffffff !important;
    color: #374151 !important;
    border: 1px solid #e5e7eb !important;
    border-radius: 12px !important;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15) !important;
    z-index: 999999 !important;
  }
  
  /* Override text colors - be more specific */
  [role="dialog"] *,
  .cookie-notice *,
  #klaro-cookie-notice * {
    color: #374151 !important;
  }
  
  /* Ensure specific text elements have correct color */
  [role="dialog"] p,
  [role="dialog"] div,
  [role="dialog"] span,
  [role="dialog"] h1,
  [role="dialog"] h2,
  [role="dialog"] h3,
  [role="dialog"] h4,
  [role="dialog"] h5,
  [role="dialog"] h6,
  .cookie-notice p,
  .cookie-notice div,
  .cookie-notice span,
  .cookie-notice h1,
  .cookie-notice h2,
  .cookie-notice h3,
  .cookie-notice h4,
  .cookie-notice h5,
  .cookie-notice h6,
  #klaro-cookie-notice p,
  #klaro-cookie-notice div,
  #klaro-cookie-notice span,
  #klaro-cookie-notice h1,
  #klaro-cookie-notice h2,
  #klaro-cookie-notice h3,
  #klaro-cookie-notice h4,
  #klaro-cookie-notice h5,
  #klaro-cookie-notice h6 {
    color: #374151 !important;
  }
  
  /* Override button styles */
  [role="dialog"] .cm-btn-success,
  .cookie-notice .cm-btn-success,
  #klaro-cookie-notice .cm-btn-success {
    background: #2563eb !important;
    color: #ffffff !important;
    border: none !important;
  }
  
  [role="dialog"] .cm-btn-danger,
  .cookie-notice .cm-btn-danger,
  #klaro-cookie-notice .cm-btn-danger {
    background: #4b5563 !important;
    color: #ffffff !important;
    border: none !important;
  }
  
  /* Override link styles */
  [role="dialog"] .cm-link,
  .cookie-notice .cm-link,
  #klaro-cookie-notice .cm-link {
    color: #2563eb !important;
    text-decoration: underline !important;
    font-weight: 500 !important;
  }
</style> 