---
// Klaro Accessibility Enhancement Component
// Enhanced component to fix dialog accessibility issues and improve contrast
---

<script>
  // Enhance Klaro accessibility when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    enhanceKlaroAccessibility();
  });

  function enhanceKlaroAccessibility() {
    // Wait for Klaro to be available
    const checkKlaro = () => {
      if (window.klaro && typeof window.klaro.getManager === 'function') {
        setupKlaroAccessibility();
      } else {
        setTimeout(checkKlaro, 100);
      }
    };
    
    checkKlaro();
  }

  function setupKlaroAccessibility() {
    // Create a mutation observer to watch for dialog creation
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;
            if (element.getAttribute('role') === 'dialog' || 
                element.classList.contains('cookie-notice') ||
                element.id === 'klaro-cookie-notice') {
              enhanceDialog(element as HTMLElement);
            }
          }
        });
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    // Check if dialog already exists
    const existingDialog = document.querySelector('[role="dialog"], .cookie-notice, #klaro-cookie-notice');
    if (existingDialog) {
      enhanceDialog(existingDialog as HTMLElement);
    }
  }

  function enhanceDialog(dialog: HTMLElement) {
    // Only apply enhancements if not already enhanced
    if (dialog.hasAttribute('data-accessibility-enhanced')) {
      return;
    }
    
    // Fix accessibility attributes
    fixAccessibilityAttributes(dialog);
    
    // Apply basic accessibility styles
    applyAccessibilityStyles(dialog);
    
    // Setup focus management
    setupFocusManagement(dialog);
    
    // Mark as enhanced
    dialog.setAttribute('data-accessibility-enhanced', 'true');
  }

  function fixAccessibilityAttributes(dialog: HTMLElement) {
    // Ensure dialog has proper ARIA attributes
    dialog.setAttribute('aria-modal', 'true');
    
    // Find or create title element
    let titleElement = dialog.querySelector('[id="klaro-dialog-title"]');
    if (!titleElement) {
      // Look for existing title elements
      const existingTitle = dialog.querySelector('h1, h2, h3, .title, [class*="title"]');
      if (existingTitle) {
        existingTitle.setAttribute('id', 'klaro-dialog-title');
        titleElement = existingTitle;
      } else {
        // Create a title element if none exists
        titleElement = document.createElement('h2');
        titleElement.setAttribute('id', 'klaro-dialog-title');
        titleElement.textContent = getDialogTitle();
        titleElement.style.cssText = 'margin: 0 0 1rem 0; font-size: 1.25rem; font-weight: 600; color: #111827;';
        dialog.insertBefore(titleElement, dialog.firstChild);
      }
    }
    
    // Find or create description element
    let descriptionElement = dialog.querySelector('[id="klaro-dialog-description"]');
    if (!descriptionElement) {
      // Look for existing description elements
      const existingDesc = dialog.querySelector('p, .description, [class*="description"]');
      if (existingDesc) {
        existingDesc.setAttribute('id', 'klaro-dialog-description');
        descriptionElement = existingDesc;
      } else {
        // Create a description element if none exists
        descriptionElement = document.createElement('p');
        descriptionElement.setAttribute('id', 'klaro-dialog-description');
        descriptionElement.textContent = getDialogDescription();
        descriptionElement.style.cssText = 'margin: 0 0 1.5rem 0; font-size: 1rem; line-height: 1.5; color: #374151;';
        if (titleElement) {
          titleElement.after(descriptionElement);
        } else {
          dialog.insertBefore(descriptionElement, dialog.firstChild);
        }
      }
    }
    
    // Set proper ARIA attributes
    dialog.setAttribute('aria-labelledby', 'klaro-dialog-title');
    dialog.setAttribute('aria-describedby', 'klaro-dialog-description');
  }

  function getDialogTitle(): string {
    // Get current language
    const lang = document.documentElement.lang || 'en';
    const titles = {
      en: 'Cookie consent',
      es: 'Consentimiento de cookies',
      ca: 'Consentiment de cookies',
      de: 'Cookie-Einwilligung'
    };
    return titles[lang as keyof typeof titles] || titles.en;
  }

  function getDialogDescription(): string {
    // Get current language
    const lang = document.documentElement.lang || 'en';
    const descriptions = {
      en: 'We use cookies to ensure you get the best experience. You can choose which cookies you want to allow.',
      es: 'Utilizamos cookies para asegurarnos de que obtienes la mejor experiencia. Puedes elegir qué cookies permitir.',
      ca: 'Utilitzem cookies per assegurar-nos que obtens la millor experiència. Pots triar quines cookies vols permetre.',
      de: 'Wir verwenden Cookies, um sicherzustellen, dass Sie die beste Erfahrung machen. Sie können auswählen, welche Cookies Sie zulassen möchten.'
    };
    return descriptions[lang as keyof typeof descriptions] || descriptions.en;
  }

  function setupFocusManagement(dialog: HTMLElement) {
    // Get all focusable elements
    const focusableElements = dialog.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    
    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
    
    // Focus the first element when dialog opens
    if (firstElement) {
      setTimeout(() => {
        firstElement.focus();
      }, 100);
    }
    
    // Handle keyboard navigation
    dialog.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        // Find and click close button
        const closeButton = dialog.querySelector('.cm-btn-danger, .cm-btn-close, [aria-label*="close"], [aria-label*="Close"]');
        if (closeButton) {
          (closeButton as HTMLElement).click();
        }
      }
      
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          // Shift + Tab
          if (document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
          }
        } else {
          // Tab
          if (document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        }
      }
    });
  }

  function applyAccessibilityStyles(dialog: HTMLElement) {
    // Apply background and text colors
    dialog.style.setProperty('background', '#ffffff', 'important');
    dialog.style.setProperty('color', '#374151', 'important');
    dialog.style.setProperty('border', '1px solid #e5e7eb', 'important');
    
    // Apply styles to ALL text elements more aggressively
    const allElements = dialog.querySelectorAll('*');
    allElements.forEach(element => {
      const el = element as HTMLElement;
      // Only apply to text elements, not buttons
      if (!el.classList.contains('cm-btn') && 
          !el.classList.contains('cm-btn-success') && 
          !el.classList.contains('cm-btn-danger') &&
          !el.classList.contains('cm-link')) {
        el.style.setProperty('color', '#374151', 'important');
      }
    });
    
    // Apply styles to buttons
    const successButtons = dialog.querySelectorAll('.cm-btn-success');
    successButtons.forEach(button => {
      (button as HTMLElement).style.setProperty('background', '#2563eb', 'important');
      (button as HTMLElement).style.setProperty('color', '#ffffff', 'important');
      (button as HTMLElement).style.setProperty('border', 'none', 'important');
    });
    
    const dangerButtons = dialog.querySelectorAll('.cm-btn-danger');
    dangerButtons.forEach(button => {
      (button as HTMLElement).style.setProperty('background', '#4b5563', 'important');
      (button as HTMLElement).style.setProperty('color', '#ffffff', 'important');
      (button as HTMLElement).style.setProperty('border', 'none', 'important');
    });
    
    // Apply styles to links
    const links = dialog.querySelectorAll('.cm-link');
    links.forEach(link => {
      (link as HTMLElement).style.setProperty('color', '#2563eb', 'important');
      (link as HTMLElement).style.setProperty('text-decoration', 'underline', 'important');
      (link as HTMLElement).style.setProperty('font-weight', '500', 'important');
    });
    
    // Force color on any remaining text elements that might be missed
    forceTextColor(dialog);
  }
  
  function forceTextColor(dialog: HTMLElement) {
    // Get all text nodes and their parent elements
    const walker = document.createTreeWalker(
      dialog,
      NodeFilter.SHOW_TEXT,
      null
    );
    
    let textNode;
    while (textNode = walker.nextNode()) {
      if (textNode.textContent && textNode.textContent.trim()) {
        const parent = textNode.parentElement;
        if (parent && 
            !parent.classList.contains('cm-btn') && 
            !parent.classList.contains('cm-btn-success') && 
            !parent.classList.contains('cm-btn-danger') &&
            !parent.classList.contains('cm-link')) {
          parent.style.setProperty('color', '#374151', 'important');
        }
      }
    }
  }

  // Global type declarations
  declare global {
    interface Window {
      klaro?: {
        getManager: () => {
          consents: Record<string, boolean>;
        };
      };
    }
  }
</script>

<style>
  /* Enhanced CSS overrides for Klaro accessibility */
  [role="dialog"],
  .cookie-notice,
  #klaro-cookie-notice {
    background: #ffffff !important;
    color: #374151 !important;
    border: 1px solid #e5e7eb !important;
    border-radius: 12px !important;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15) !important;
    z-index: 999999 !important;
    max-width: 400px !important;
    padding: 1.5rem !important;
  }
  
  /* Ensure proper focus indicators */
  [role="dialog"] button:focus-visible,
  .cookie-notice button:focus-visible,
  #klaro-cookie-notice button:focus-visible {
    outline: 2px solid #2563eb !important;
    outline-offset: 2px !important;
    box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.25) !important;
  }
  
  /* Override text colors - be more specific */
  [role="dialog"] *,
  .cookie-notice *,
  #klaro-cookie-notice * {
    color: #374151 !important;
  }
  
  /* Ensure specific text elements have correct color */
  [role="dialog"] p,
  [role="dialog"] div,
  [role="dialog"] span,
  [role="dialog"] h1,
  [role="dialog"] h2,
  [role="dialog"] h3,
  [role="dialog"] h4,
  [role="dialog"] h5,
  [role="dialog"] h6,
  .cookie-notice p,
  .cookie-notice div,
  .cookie-notice span,
  .cookie-notice h1,
  .cookie-notice h2,
  .cookie-notice h3,
  .cookie-notice h4,
  .cookie-notice h5,
  .cookie-notice h6,
  #klaro-cookie-notice p,
  #klaro-cookie-notice div,
  #klaro-cookie-notice span,
  #klaro-cookie-notice h1,
  #klaro-cookie-notice h2,
  #klaro-cookie-notice h3,
  #klaro-cookie-notice h4,
  #klaro-cookie-notice h5,
  #klaro-cookie-notice h6 {
    color: #374151 !important;
  }
  
  /* Override button styles */
  [role="dialog"] .cm-btn-success,
  .cookie-notice .cm-btn-success,
  #klaro-cookie-notice .cm-btn-success {
    background: #2563eb !important;
    color: #ffffff !important;
    border: none !important;
    padding: 0.5rem 1rem !important;
    border-radius: 6px !important;
    font-weight: 500 !important;
    min-height: 36px !important;
  }
  
  [role="dialog"] .cm-btn-danger,
  .cookie-notice .cm-btn-danger,
  #klaro-cookie-notice .cm-btn-danger {
    background: #4b5563 !important;
    color: #ffffff !important;
    border: none !important;
    padding: 0.5rem 1rem !important;
    border-radius: 6px !important;
    font-weight: 500 !important;
    min-height: 36px !important;
  }
  
  /* Override link styles */
  [role="dialog"] .cm-link,
  .cookie-notice .cm-link,
  #klaro-cookie-notice .cm-link {
    color: #2563eb !important;
    text-decoration: underline !important;
    font-weight: 500 !important;
  }
  
  /* Ensure proper spacing */
  [role="dialog"] button + button,
  .cookie-notice button + button,
  #klaro-cookie-notice button + button {
    margin-left: 0.5rem !important;
  }
</style> 