---
import HeaderLink from './HeaderLink.astro';
import { SITE_TITLE, LANGUAGES } from '../consts';
import { getLangFromUrl, useTranslations, getNavLink } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Map language codes to flag classes
const flagMap = {
  en: 'lang-icon-en',
  es: 'lang-icon-es', 
  ca: 'lang-icon-ca',
  de: 'lang-icon-de'
};
---

<header class="header">
  <div class="container">
    <nav class="nav">
            <div class="nav-brand">
        <a href={getNavLink('', lang)} class="logo">
          <span class="logo-icon">
             <picture>
                <img src="/logoespaiai.webp" alt="Espai.AI logo" class="logo-img" width="160" height="40" />
             </picture>
          </span>
        </a>
      </div>
      
      <div class="nav-menu" id="navMenu" aria-hidden="true">
        <HeaderLink href={getNavLink('', lang)}>{t('nav.home')}</HeaderLink>
        <HeaderLink href={getNavLink('about', lang)}>{t('nav.about')}</HeaderLink>
        <HeaderLink href={getNavLink('pricing', lang)}>{t('nav.pricing')}</HeaderLink>
        <HeaderLink href={getNavLink('faq', lang)}>{t('nav.faq')}</HeaderLink>
      </div>
      
      <button class="mobile-menu-toggle" id="mobileMenuToggle" aria-label="Toggle mobile menu" aria-expanded="false">
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
      </button>
      
      <div class="nav-actions">
        <div class="language-selector">
          <div class="language-display" id="language-display">
            <span class={`lang-icon ${flagMap[lang]}`}></span>
            <span class="language-name">{LANGUAGES[lang]}</span>
            <svg class="dropdown-arrow" width="12" height="8" viewBox="0 0 12 8" fill="none">
              <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <div class="language-dropdown" id="language-dropdown">
            {Object.entries(LANGUAGES).map(([code, name]) => (
              <div class="language-option" data-lang={code} onclick={`changeLanguage('${code}')`}>
                <span class={`lang-icon ${flagMap[code]}`}></span>
                <span class="language-option-name">{name}</span>
              </div>
            ))}
          </div>
        </div>
        <a href={getNavLink('contact', lang)} class="btn btn-secondary">{t('nav.contact')}</a>
      </div>
    </nav>
  </div>
</header>

<style>
  @font-face {
    font-family: 'Nasalization';
    src: url('/fonts/NasalizationRg.otf') format('opentype');
    font-display: swap;
  }
  .header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: rgba(10, 10, 15, 0.9);
    backdrop-filter: blur(20px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
  }
  
  .nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 0;
  }
  
  .logo {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    transition: all 0.3s ease;
  }
  
  .logo:hover {
    transform: scale(1.02);
  }
  
  .logo-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    /* Remove fixed height/width and negative margin */
    /* height: 48px; */
    /* width: 48px; */
    /* margin-right: -16px; */
    max-width: 180px;
    max-height: 48px;
  }
  .logo-img {
    height: 40px;
    max-width: 160px;
    width: auto;
    object-fit: contain;
    display: block;
  }
  .logo-svg {
    width: 100%;
    height: 100%;
    fill: url(#logo-gradient);
  }
  .logo-text {
    font-family: 'Nasalization', 'Atkinson Hyperlegible', Arial, sans-serif;
    font-size: 1.5rem;
    font-weight: 700;
    background: var(--accent-gradient);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
  }
  
  .nav-menu {
    display: flex;
    gap: 2rem;
    align-items: center;
  }
  
  .nav-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  /* Language selector styles */
  .language-selector {
    position: relative;
  }

  .language-display {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 120px;
  }

  .language-display:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }

  .lang-icon {
    display: inline-block;
    width: 25px;
    height: 15px;
    background-image: url('/lang-flags.png');
    background-repeat: no-repeat;
    flex-shrink: 0;
  }

  .language-name {
    color: white;
    font-size: 0.9rem;
    flex: 1;
  }

  .dropdown-arrow {
    color: rgba(255, 255, 255, 0.7);
    transition: transform 0.3s ease;
  }

  .language-selector.open .dropdown-arrow {
    transform: rotate(180deg);
  }

  .language-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: rgba(10, 10, 15, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.5rem;
    margin-top: 0.5rem;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .language-selector.open .language-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .language-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
    border-radius: 0.25rem;
    margin: 0.25rem;
  }

  .language-option:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .language-option-name {
    color: white;
    font-size: 0.9rem;
  }

  /* Flag sprite positions */
  .lang-icon-en {
    background-position: -450px -60px;
  }
  .lang-icon-es {
    background-position: -100px -75px;
  }
  .lang-icon-ca {
    background-position: -0px -45px;
  }
  .lang-icon-de {
    background-position: -50px -60px;
  }
  
  /* Mobile menu toggle */
  .mobile-menu-toggle {
    display: none;
    flex-direction: column;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    gap: 0.25rem;
  }
  
  .hamburger-line {
    width: 25px;
    height: 3px;
    background: var(--space-white);
    transition: all 0.3s ease;
    border-radius: 2px;
  }
  
  .mobile-menu-toggle.active .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(6px, 6px);
  }
  
  .mobile-menu-toggle.active .hamburger-line:nth-child(2) {
    opacity: 0;
  }
  
  .mobile-menu-toggle.active .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(6px, -6px);
  }

  @media (max-width: 768px) {
    .nav-menu {
      position: fixed;
      top: 80px;
      left: 0;
      right: 0;
      background: rgba(10, 10, 15, 0.95);
      backdrop-filter: blur(20px);
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-direction: column;
      padding: 2rem 0;
      transform: translateY(-100%);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      z-index: 999;
    }
    
    .nav-menu.active {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }
    
    .mobile-menu-toggle {
      display: flex;
    }
    
    .nav-actions {
      gap: 0.5rem;
    }
    
    .nav-actions .btn {
      padding: 8px 16px;
      font-size: 0.9rem;
    }
    
    .logo-img {
      height: 32px;
      max-width: 120px;
    }
    
    .logo-text {
      font-size: 1.25rem;
    }

    .language-display {
      min-width: 120px;
      padding: 0.4rem 0.6rem;
    }
    .language-dropdown {
      min-width: 140px;
      left: 0;
      right: auto;
      width: max-content;
      max-width: 90vw;
      overflow-x: auto;
    }
    .language-option-name {
      display: inline;
    }
  }
  
  @media (max-width: 480px) {
    .logo-text {
      display: none;
    }
    
    .logo-img {
      height: 36px;
      max-width: 100px;
    }
    .mobile-title {
      display: inline-block;
      font-family: 'Nasalization', 'Atkinson Hyperlegible', Arial, sans-serif;
      font-size: 1rem;
      font-weight: 700;
      background: var(--accent-gradient);
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      text-fill-color: transparent;
      margin-left: 0.25rem;
      vertical-align: middle;
    }
    .language-display {
      min-width: 48px;
      padding: 0.2rem 0.4rem 0.2rem 0.2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.2rem;
    }
    .language-name {
      display: none;
    }
    .lang-icon {
      display: inline-block;
      margin-right: 0.2rem;
    }
    .dropdown-arrow {
      margin-left: 0.1rem;
    }
  }
  @media (min-width: 481px) {
    .mobile-title {
      display: none;
    }
  }
</style>
<script>
  function changeLanguage(newLang) {
    const currentPath = window.location.pathname;
    const segments = currentPath.split('/');
    
    // Remove current language from path if it exists
    if (segments[1] && ['en', 'es', 'ca', 'de'].includes(segments[1])) {
      segments.splice(1, 1);
    }
    
    // Add new language prefix (except for English)
    const newPath = newLang === 'en' 
      ? segments.join('/') || '/'
      : `/${newLang}${segments.join('/') || '/'}`;
    
    // Ensure trailing slash for consistency
    const normalizedPath = newPath.endsWith('/') ? newPath : newPath + '/';
    
    // Save user's preferred language
    localStorage.setItem('user-preferred-lang', newLang);
    
    window.location.href = normalizedPath;
  }
  
  // Handle dropdown toggle with optimized event handling
  function toggleLanguageDropdown() {
    const selector = document.querySelector('.language-selector');
    if (selector) {
      selector.classList.toggle('open');
    }
  }
  
  // Close dropdown when clicking outside with event delegation
  function closeLanguageDropdown(event) {
    const selector = document.querySelector('.language-selector');
    if (selector && !selector.contains(event.target)) {
      selector.classList.remove('open');
    }
  }
  
  // Initialize dropdown functionality with deferred loading
  function initHeaderFunctionality() {
    const languageDisplay = document.getElementById('language-display');
    if (languageDisplay) {
      languageDisplay.addEventListener('click', toggleLanguageDropdown);
    }
    
    document.addEventListener('click', closeLanguageDropdown);
  }
  
  // Mobile menu functionality with optimized DOM queries
  function toggleMobileMenu() {
    const navMenu = document.getElementById('navMenu');
    const mobileToggle = document.getElementById('mobileMenuToggle');
    
    if (!navMenu || !mobileToggle) return;
    
    const isActive = navMenu.classList.contains('active');
    
    navMenu.classList.toggle('active');
    mobileToggle.classList.toggle('active');
    
    // Update ARIA attributes
    mobileToggle.setAttribute('aria-expanded', !isActive);
    navMenu.setAttribute('aria-hidden', isActive);
  }
  
  // Initialize mobile menu with deferred loading
  function initMobileMenu() {
    const mobileToggle = document.getElementById('mobileMenuToggle');
    if (mobileToggle) {
      mobileToggle.addEventListener('click', toggleMobileMenu);
    }
    
    // Close mobile menu when clicking on a link with event delegation
    document.addEventListener('click', (event) => {
      if (event.target.closest('.nav-menu a')) {
        const navMenu = document.getElementById('navMenu');
        const mobileToggle = document.getElementById('mobileMenuToggle');
        
        if (navMenu && mobileToggle) {
          navMenu.classList.remove('active');
          mobileToggle.classList.remove('active');
          mobileToggle.setAttribute('aria-expanded', 'false');
          navMenu.setAttribute('aria-hidden', 'true');
        }
      }
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const navMenu = document.getElementById('navMenu');
        const mobileToggle = document.getElementById('mobileMenuToggle');
        
        if (navMenu && mobileToggle && navMenu.classList.contains('active')) {
          navMenu.classList.remove('active');
          mobileToggle.classList.remove('active');
          mobileToggle.setAttribute('aria-expanded', 'false');
          navMenu.setAttribute('aria-hidden', 'true');
          mobileToggle.focus();
        }
      }
    });
  }
  
  // Initialize all header functionality with deferred loading
  function initHeader() {
    initHeaderFunctionality();
    initMobileMenu();
  }
  
  // Defer initialization to prevent blocking initial render
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      if ('requestIdleCallback' in window) {
        requestIdleCallback(initHeader, { timeout: 1000 });
      } else {
        setTimeout(initHeader, 100);
      }
    });
  } else {
    if ('requestIdleCallback' in window) {
      requestIdleCallback(initHeader, { timeout: 1000 });
    } else {
      setTimeout(initHeader, 100);
    }
  }
  
  // Make function global
  window.changeLanguage = changeLanguage;
</script>
