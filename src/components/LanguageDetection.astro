---
import { LANGUAGES } from '../consts';
import { getLangFromUrl, useTranslations } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div id="language-detection-banner" class="language-detection-banner hidden">
  <div class="banner-content">
    <div class="banner-icon">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="10"/>
        <path d="M2 12h20"/>
        <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"/>
      </svg>
    </div>
    <div class="banner-text">
      <h3 class="banner-title" id="detection-title">{t('lang.detection.title')}</h3>
      <p class="banner-message" id="detection-message"></p>
    </div>
    <div class="banner-actions">
      <button id="switch-language-btn" class="btn btn-primary">
        <span id="switch-text"></span>
      </button>
      <button id="stay-language-btn" class="btn btn-secondary">
        {t('lang.detection.stay')}
      </button>
      <button id="dismiss-language-btn" class="btn btn-text">
        {t('lang.detection.dismiss')}
      </button>
    </div>
    <button id="close-banner-btn" class="close-btn" aria-label="Close">
      <svg width="18" height="18" viewBox="0 0 18 18" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"/>
        <line x1="6" y1="6" x2="18" y2="18"/>
      </svg>
    </button>
  </div>
</div>

<style>
  .language-detection-banner {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1001;
    background: linear-gradient(135deg, rgba(6, 182, 212, 0.95) 0%, rgba(59, 130, 246, 0.95) 100%);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    transform: translateY(-100%);
    transition: transform 0.3s ease;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .language-detection-banner.show {
    transform: translateY(0);
  }

  .language-detection-banner.hidden {
    display: none;
  }

  .banner-content {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
  }

  .banner-icon {
    color: white;
    flex-shrink: 0;
  }

  .banner-text {
    flex: 1;
    color: white;
  }

  .banner-title {
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 0.25rem 0;
  }

  .banner-message {
    font-size: 0.9rem;
    margin: 0;
    opacity: 0.9;
  }

  .banner-actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
    flex-shrink: 0;
  }

  .btn {
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .btn-primary {
    background: white;
    color: #1e40af;
  }

  .btn-primary:hover {
    background: #f8fafc;
    transform: translateY(-1px);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .btn-text {
    background: transparent;
    color: white;
    opacity: 0.8;
    font-size: 0.8rem;
  }

  .btn-text:hover {
    opacity: 1;
    text-decoration: underline;
  }

  .close-btn {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.25rem;
    opacity: 0.7;
    transition: opacity 0.2s ease;
  }

  .close-btn:hover {
    opacity: 1;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .banner-content {
      flex-direction: column;
      gap: 0.75rem;
      padding: 1rem;
      text-align: center;
    }

    .banner-actions {
      flex-direction: column;
      width: 100%;
      gap: 0.5rem;
    }

    .btn {
      width: 100%;
      justify-content: center;
    }

    .close-btn {
      top: 0.25rem;
      right: 0.25rem;
    }
  }

  @media (max-width: 480px) {
    .banner-actions {
      flex-direction: column;
    }

    .btn {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }
  }
</style>

<script>
  // Language detection configuration
  const LANGUAGES = {
    en: 'English',
    es: 'Español', 
    ca: 'Català',
    de: 'Deutsch'
  };

  const UI_TEXT = {
    en: {
      'lang.detection.message': 'We detected your browser language is {language}. Would you like to switch to this language?',
      'lang.detection.switch': 'Switch to {language}'
    },
    es: {
      'lang.detection.message': 'Detectamos que tu navegador está en {language}. ¿Te gustaría cambiar a este idioma?',
      'lang.detection.switch': 'Cambiar a {language}'
    },
    ca: {
      'lang.detection.message': 'Hem detectat que el teu navegador està en {language}. Vols canviar a aquest idioma?',
      'lang.detection.switch': 'Canviar a {language}'
    },
    de: {
      'lang.detection.message': 'Wir haben erkannt, dass Ihr Browser auf {language} eingestellt ist. Möchten Sie zu dieser Sprache wechseln?',
      'lang.detection.switch': 'Zu {language} wechseln'
    }
  };

  // Helper functions
  function getLangFromUrl(url) {
    const [, lang] = url.pathname.split('/');
    if (lang && lang in LANGUAGES) return lang;
    return 'en';
  }

  function detectBrowserLanguage() {
    if (typeof window === 'undefined') return null;
    
    const browserLang = navigator.language || navigator.languages?.[0];
    if (!browserLang) return null;
    
    const langCode = browserLang.split('-')[0].toLowerCase();
    
    if (langCode in LANGUAGES) {
      return langCode;
    }
    
    return null;
  }

  function shouldShowLanguagePrompt(currentLang, detectedLang) {
    if (currentLang === detectedLang) return false;
    
    const dismissed = localStorage.getItem('lang-detection-dismissed');
    if (dismissed === 'true') return false;
    
    const hasManualSwitch = localStorage.getItem('lang-manual-switch');
    if (hasManualSwitch === 'true') return false;
    
    return true;
  }

  function dismissLanguagePrompt() {
    localStorage.setItem('lang-detection-dismissed', 'true');
  }

  function markManualLanguageSwitch() {
    localStorage.setItem('lang-manual-switch', 'true');
  }

  function switchToLanguage(newLang) {
    const currentPath = window.location.pathname;
    const segments = currentPath.split('/');
    
    if (segments[1] && segments[1] in LANGUAGES) {
      segments.splice(1, 1);
    }
    
    const newPath = newLang === 'en' 
      ? segments.join('/') || '/'
      : `/${newLang}${segments.join('/') || '/'}`;
    
    markManualLanguageSwitch();
    window.location.href = newPath;
  }

  function useTranslations(lang) {
    return function(key) {
      return UI_TEXT[lang][key] || UI_TEXT['en'][key];
    }
  }

  function initLanguageDetection() {
    if (typeof window === 'undefined') return;

    const banner = document.getElementById('language-detection-banner');
    if (!banner) return;

    const currentLang = getLangFromUrl(new URL(window.location.href));
    const detectedLang = detectBrowserLanguage();
    
    if (!detectedLang || !shouldShowLanguagePrompt(currentLang, detectedLang)) {
      return;
    }

    const t = useTranslations(currentLang);
    
    const messageEl = document.getElementById('detection-message');
    const switchTextEl = document.getElementById('switch-text');
    
    if (messageEl && switchTextEl) {
      const detectedLanguageName = LANGUAGES[detectedLang];
      messageEl.textContent = t('lang.detection.message').replace('{language}', detectedLanguageName);
      switchTextEl.textContent = t('lang.detection.switch').replace('{language}', detectedLanguageName);
    }

    banner.classList.remove('hidden');
    setTimeout(() => {
      banner.classList.add('show');
    }, 100);

    const switchBtn = document.getElementById('switch-language-btn');
    const stayBtn = document.getElementById('stay-language-btn');
    const dismissBtn = document.getElementById('dismiss-language-btn');
    const closeBtn = document.getElementById('close-banner-btn');

    if (switchBtn) {
      switchBtn.addEventListener('click', () => {
        switchToLanguage(detectedLang);
      });
    }

    if (stayBtn) {
      stayBtn.addEventListener('click', () => {
        hideBanner();
      });
    }

    if (dismissBtn) {
      dismissBtn.addEventListener('click', () => {
        dismissLanguagePrompt();
        hideBanner();
      });
    }

    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        hideBanner();
      });
    }

    function hideBanner() {
      banner.classList.remove('show');
      setTimeout(() => {
        banner.classList.add('hidden');
      }, 300);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageDetection);
  } else {
    initLanguageDetection();
  }
</script> 