---
import Layout from '../layouts/Layout.astro';
import { getLangFromUrl, useTranslations } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout title={`${t('contact.title')} | ${t('site.title')}`} description={t('contact.subtitle')}>
  <section class="section">
    <div class="container">
      <div class="section-header text-center mb-4">
        <h1>{t('contact.title')}</h1>
        <p class="text-large">{t('contact.subtitle')}</p>
      </div>
      
      <div class="contact-wrapper">
        <div class="contact-form-container">
          <form id="contactForm" class="contact-form">
            <div class="form-row">
              <div class="form-group">
                <label for="name">{t('contact.form.name')} *</label>
                <input type="text" id="name" name="name" required>
                <span class="error-message" id="nameError"></span>
              </div>
              
              <div class="form-group">
                <label for="email">{t('contact.form.email')} *</label>
                <input type="email" id="email" name="email" required>
                <span class="error-message" id="emailError"></span>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="company">{t('contact.form.company')} *</label>
                <input type="text" id="company" name="company" required>
                <span class="error-message" id="companyError"></span>
              </div>
              
              <div class="form-group">
                <label for="phone">{t('contact.form.phone')}</label>
                <input type="tel" id="phone" name="phone">
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="employees">{t('contact.form.employees')} *</label>
                <select id="employees" name="employees" required>
                  <option value="">Select...</option>
                  <option value="1-10">{t('contact.form.employees.option1')}</option>
                  <option value="11-50">{t('contact.form.employees.option2')}</option>
                  <option value="51-200">{t('contact.form.employees.option3')}</option>
                  <option value="200+">{t('contact.form.employees.option4')}</option>
                </select>
                <span class="error-message" id="employeesError"></span>
              </div>
              
              <div class="form-group">
                <label for="interest">{t('contact.form.interest')} *</label>
                <select id="interest" name="interest" required>
                  <option value="">Select...</option>
                  <option value="demo">{t('contact.form.interest.demo')}</option>
                  <option value="pricing">{t('contact.form.interest.pricing')}</option>
                  <option value="other">{t('contact.form.interest.other')}</option>
                </select>
                <span class="error-message" id="interestError"></span>
              </div>
            </div>
            
            <div class="form-group">
              <label for="message">{t('contact.form.message')} *</label>
              <textarea id="message" name="message" rows="5" required></textarea>
              <span class="error-message" id="messageError"></span>
            </div>
            
            <div class="form-actions">
              <button type="submit" class="btn btn-primary" id="submitBtn">
                <span id="submitText">{t('contact.form.submit')}</span>
                <span id="loadingText" style="display: none;">{t('contact.form.sending')}</span>
              </button>
            </div>
            
            <div id="formMessage" class="form-message" style="display: none;"></div>
          </form>
        </div>
        
        <div class="contact-info">
          <div class="contact-card">
            <h3>ðŸ“Š {t('contact.form.interest.demo')}</h3>
            <p>See Espai.ai in action with a personalized demo tailored to your industry and business needs.</p>
          </div>
          
          <div class="contact-card">
            <h3>ðŸ’° Competitive Pricing</h3>
            <p>Pay per device, not per automation. No payment until you start seeing real time savings from our automations.</p>
          </div>
          
          <div class="contact-card">
            <h3>ðŸš€ Business Optimization</h3>
            <p>Transform your business processes with AI-powered automation. Our solutions adapt to your specific needs and industry requirements.</p>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  .contact-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 3rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .contact-form-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    padding: 2.5rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .form-group label {
    font-weight: 600;
    color: var(--text-color);
    font-size: 0.9rem;
  }
  
  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 0.75rem 1rem;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.05);
    color: var(--text-color);
    font-size: 1rem;
    transition: all 0.3s ease;
  }
  
  .form-group select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
    cursor: pointer;
  }
  
  .form-group select option {
    background: var(--space-dark);
    color: var(--space-white);
    padding: 0.5rem;
  }
  
  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
  }
  
  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }
  
  .error-message {
    color: #ef4444;
    font-size: 0.8rem;
    display: none;
  }
  
  .error-message.show {
    display: block;
  }
  
  .form-actions {
    margin-top: 1rem;
  }
  
  .btn-primary {
    background: var(--accent-gradient);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 10px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
  }
  
  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(6, 182, 212, 0.3);
  }
  
  .btn-primary:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }
  
  .form-message {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 10px;
    text-align: center;
    font-weight: 500;
  }
  
  .form-message.success {
    background: rgba(34, 197, 94, 0.1);
    color: #22c55e;
    border: 1px solid rgba(34, 197, 94, 0.2);
  }
  
  .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
    border: 1px solid rgba(239, 68, 68, 0.2);
  }
  
  .contact-info {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .contact-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 1.5rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
  }
  
  .contact-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }
  
  .contact-card h3 {
    margin: 0 0 0.5rem 0;
    color: var(--accent-color);
    font-size: 1.1rem;
  }
  
  .contact-card p {
    margin: 0;
    color: var(--text-color);
    opacity: 0.8;
    font-size: 0.9rem;
    line-height: 1.5;
  }
  
  @media (max-width: 768px) {
    .contact-wrapper {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
    
    .form-row {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .contact-form-container {
      padding: 1.5rem;
    }
  }
</style>

<script>
  // EmailJS configuration - Update these with your actual values
  const EMAIL_CONFIG = {
    emailjs: {
      serviceId: 'service_espaiai', // Your EmailJS service ID
      templateId: 'template_c9fzb0s', // Your EmailJS template ID
      publicKey: 'sE_Qtko-v5JRrulg9', // Your EmailJS public key
      enabled: true // EmailJS is now configured and enabled
    },
    formspree: {
      endpoint: 'https://formspree.io/f/YOUR_FORM_ID', // Replace with your Formspree endpoint
      enabled: false // Set to true if you want to use Formspree instead
    },
    fallbackEmail: 'contact@espai.ai'
  };
  
  // Form validation
  function validateForm() {
    const form = document.getElementById('contactForm');
    const formData = new FormData(form);
    let isValid = true;
    
    // Clear previous errors
    document.querySelectorAll('.error-message').forEach(el => {
      el.classList.remove('show');
    });
    
    // Required fields validation
    const requiredFields = ['name', 'email', 'company', 'employees', 'interest', 'message'];
    
    requiredFields.forEach(field => {
      const value = formData.get(field);
      if (!value || value.trim() === '') {
        showError(field, 'This field is required');
        isValid = false;
      }
    });
    
    // Email validation
    const email = formData.get('email');
    if (email && !isValidEmail(email)) {
      showError('email', 'Please enter a valid email address');
      isValid = false;
    }
    
    return isValid;
  }
  
  function showError(fieldName, message) {
    const errorElement = document.getElementById(fieldName + 'Error');
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.classList.add('show');
    }
  }
  
  function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }
  
  function showMessage(message, type) {
    const messageElement = document.getElementById('formMessage');
    messageElement.textContent = message;
    messageElement.className = `form-message ${type}`;
    messageElement.style.display = 'block';
    
    // Hide message after 5 seconds
    setTimeout(() => {
      messageElement.style.display = 'none';
    }, 5000);
  }
  
  function setLoading(isLoading) {
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const loadingText = document.getElementById('loadingText');
    
    if (isLoading) {
      submitBtn.disabled = true;
      submitText.style.display = 'none';
      loadingText.style.display = 'inline';
    } else {
      submitBtn.disabled = false;
      submitText.style.display = 'inline';
      loadingText.style.display = 'none';
    }
  }
  
  // Email sending functions
  async function sendViaEmailJS(formData) {
    if (!EMAIL_CONFIG.emailjs.enabled) {
      throw new Error('EmailJS is not configured');
    }
    
    await loadEmailJS();
    
    const templateParams = {
      from_name: formData.get('name'),
      from_email: formData.get('email'),
      company: formData.get('company'),
      phone: formData.get('phone') || 'Not provided',
      employees: formData.get('employees'),
      interest: formData.get('interest'),
      message: formData.get('message'),
      to_email: EMAIL_CONFIG.fallbackEmail
    };
    
    return emailjs.send(
      EMAIL_CONFIG.emailjs.serviceId,
      EMAIL_CONFIG.emailjs.templateId,
      templateParams,
      EMAIL_CONFIG.emailjs.publicKey
    );
  }
  
  async function sendViaFormspree(formData) {
    if (!EMAIL_CONFIG.formspree.enabled) {
      throw new Error('Formspree is not configured');
    }
    
    const response = await fetch(EMAIL_CONFIG.formspree.endpoint, {
      method: 'POST',
      body: formData,
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Formspree error: ${response.status}`);
    }
    
    return response.json();
  }
  
  function sendEmailFallback(formData) {
    const name = formData.get('name');
    const email = formData.get('email');
    const company = formData.get('company');
    const phone = formData.get('phone');
    const employees = formData.get('employees');
    const interest = formData.get('interest');
    const message = formData.get('message');
    
    const subject = `Contact Form - ${interest} - ${company}`;
    const body = `
Name: ${name}
Email: ${email}
Company: ${company}
Phone: ${phone || 'Not provided'}
Employees: ${employees}
Interest: ${interest}

Message:
${message}
    `.trim();
    
    const mailtoLink = `mailto:${EMAIL_CONFIG.fallbackEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    window.location.href = mailtoLink;
    
    showMessage('Email client opened. Please send the email to complete your request.', 'success');
  }
  
  // Load EmailJS library
  async function loadEmailJS() {
    if (typeof emailjs !== 'undefined') {
      return;
    }
    
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';
      script.onload = () => {
        if (EMAIL_CONFIG.emailjs.publicKey !== 'YOUR_EMAILJS_PUBLIC_KEY') {
          emailjs.init(EMAIL_CONFIG.emailjs.publicKey);
        }
        resolve();
      };
      script.onerror = () => reject(new Error('Failed to load EmailJS'));
      document.head.appendChild(script);
    });
  }
  
  // Form submission handler
  document.getElementById('contactForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    const formData = new FormData(this);
    
    try {
      // Try EmailJS first (if configured)
      if (EMAIL_CONFIG.emailjs.enabled) {
        await sendViaEmailJS(formData);
        showMessage('Message sent successfully! We\'ll get back to you soon.', 'success');
        this.reset();
      }
      // Try Formspree as fallback
      else if (EMAIL_CONFIG.formspree.enabled) {
        await sendViaFormspree(formData);
        showMessage('Message sent successfully! We\'ll get back to you soon.', 'success');
        this.reset();
      }
      // Use mailto as final fallback
      else {
        sendEmailFallback(formData);
      }
    } catch (error) {
      console.error('Error sending email:', error);
      showMessage('Error sending message. Please try again or contact us directly.', 'error');
    } finally {
      setLoading(false);
    }
  });
</script> 